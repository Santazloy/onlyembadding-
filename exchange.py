# exchange.py
"""
–ú–æ–¥—É–ª—å —Å –ª–æ–≥–∏–∫–æ–π –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞.
–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ aiogram-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤: –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
"""

import logging
import requests

logger = logging.getLogger(__name__)

CURRENCIES = {
    'RUB': {
        'name': '–†—É–±–ª—å',
        'flag': 'üá∑üá∫'
    },
    'USD': {
        'name': '–î–æ–ª–ª–∞—Ä',
        'flag': 'üá∫üá∏'
    },
    'UAH': {
        'name': '–ì—Ä–∏–≤–Ω–∞',
        'flag': 'üá∫üá¶'
    },
    'CNY': {
        'name': '–Æ–∞–Ω—å',
        'flag': 'üá®üá≥'
    },
    'EUR': {
        'name': '–ï–≤—Ä–æ',
        'flag': 'üá™üá∫'
    },
    'USDT': {
        'name': 'Tether',
        'flag': 'üè¥‚Äç‚ò†Ô∏è'
    },
}


def get_usdt_rate_coingecko():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=usd"
    try:
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            logger.info("CoinGecko response for USDT: %s", data)
            usd_value = data.get("tether", {}).get("usd")
            if usd_value and usd_value != 0:
                return 1.0 / float(usd_value)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USDT —Å CoinGecko: %s", e)
    return None


def get_fiat_rates():
    url = "https://open.er-api.com/v6/latest/USD"
    try:
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            logger.info("open.er-api.com response: %s", data)
            rates = data.get("rates", {})
            filtered = {
                key: rates.get(key)
                for key in ["RUB", "UAH", "CNY", "EUR"]
            }
            filtered["USD"] = 1.0
            logger.info("–§–∏–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã: %s", filtered)
            return filtered
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Å open.er-api.com: %s", e)
    return {}


def get_all_rates(base_currency: str):
    rates = get_fiat_rates()
    usdt_rate = get_usdt_rate_coingecko()
    if usdt_rate is not None:
        rates["USDT"] = usdt_rate
    if not rates:
        return {}

    base_currency = base_currency.upper()
    if base_currency == "USD":
        return rates

    if base_currency in rates:
        base_to_usd = 1.0 / rates[base_currency]
        converted = {}
        for code, r in rates.items():
            converted[code] = base_to_usd * r
        return converted

    return {}


def convert_and_format(amount: float, base_currency: str) -> str:
    base_currency = base_currency.upper()
    rates = get_all_rates(base_currency)
    if not rates:
        return "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.</b>"

    result_lines = [f"üí± {amount} {base_currency} ="]
    for code, rate in rates.items():
        if code == base_currency:
            continue
        converted = round(amount * rate, 2)
        flag = CURRENCIES.get(code, {}).get("flag", "")
        name = CURRENCIES.get(code, {}).get("name", code)
        result_lines.append(f"{flag} {converted} {code} ‚Äî {name}")

    formatted = "<b>" + "\n".join(result_lines) + "</b>"
    return formatted
