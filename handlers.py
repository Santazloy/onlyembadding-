# handlers.py

import os
import html
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, List
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile

from config import GROUP_IDS
from db import (
    save_embedding, count_embeddings, save_message,
    find_similar_messages, get_user_statistics,
    update_user_metrics, get_user_metrics_history
)
from openai_utils import get_embedding, transcribe_audio, analyze_sentiment
from daily_report import send_daily_report, send_period_report
from exchange import convert_and_format
from web import process_web_command
from mamasan import (
    VOICE_TRIGGERS_EN, VOICE_TRIGGERS_RU,
    TEXT_TRIGGERS_EN, TEXT_TRIGGERS_RU,
    detect_language_of_trigger,
    generate_gpt_reply, send_voice_reply,
    send_random_questions,
    mama_san,  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MamaSan
    send_interactive_menu,  # –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
    detect_character_mention  # –î–µ—Ç–µ–∫—Ç–æ—Ä —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
)
from taro_module import (
    manara_cards, TARO_FOLDER, draw_cards,
    get_card_interpretation, REVERSED_CHANCE
)

logger = logging.getLogger(__name__)
router = Router()

# –ö—ç—à –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
message_cache: Dict[int, Dict] = {}


@router.message(Command("test"))
async def cmd_test(message: types.Message):
    total = await count_embeddings()
    await message.answer(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –ë–î: {total}")


@router.message(Command("report"))
async def cmd_report(message: types.Message):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    await send_daily_report(message.bot, message.chat.id)
    await message.answer("üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")


@router.message(Command("three"))
async def cmd_three_days_report(message: types.Message):
    """–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 72 —á–∞—Å–∞"""
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 72 —á–∞—Å–∞...")
    await send_period_report(message.bot, message.chat.id, days=3)
    await message.answer("üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 72 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


@router.message(Command("week"))
async def cmd_week_report(message: types.Message):
    """–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é...")
    await send_period_report(message.bot, message.chat.id, days=7)
    await message.answer("üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


@router.message(Command("month"))
async def cmd_month_report(message: types.Message):
    """–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"""
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
    await send_period_report(message.bot, message.chat.id, days=30)
    await message.answer("üìä –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


@router.message(Command("mama"))
async def cmd_mama_menu(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –ú–∞–º–∞ —Å–∞–Ω"""
    await send_interactive_menu(message)


@router.message(Command("stats"))
async def cmd_user_stats(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = message.from_user.id
    group_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=7)

    user_stats = await get_user_statistics(group_id, start_time, end_time)
    user_data = user_stats.get(user_id, {})

    if not user_data:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
    metrics_history = await get_user_metrics_history(group_id, user_id, days=7)

    stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_data.get('user_name', 'Unknown')}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {user_data.get('message_count', 0)}
üìù <b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞:</b> {user_data.get('avg_message_length', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤
üïê <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤:</b> {user_data.get('active_hours', 0)}
üß† <b>–≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:</b> {user_data.get('embedding_count', 0)}

<b>–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º:</b>
"""

    for metric in metrics_history[:7]:
        date_str = metric['metric_date'].strftime('%d.%m')
        msg_count = metric.get('message_count', 0)
        influence = metric.get('influence_score', 0)
        stats_text += f"üìÖ {date_str}: {msg_count} —Å–æ–æ–±—â., –≤–ª–∏—è–Ω–∏–µ: {influence:.2f}\n"

    await message.answer(stats_text, parse_mode="HTML")


@router.message(Command("similar"))
async def cmd_find_similar(message: types.Message):
    """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.replace('/similar', '').strip()

    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /similar <—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞>")
        return

    # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_embedding = await get_embedding(text)
    if not search_embedding:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    similar_messages = await find_similar_messages(
        message.chat.id,
        search_embedding,
        threshold=0.7,
        limit=5
    )

    if not similar_messages:
        await message.answer("–ü–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response = "üîç <b>–ü–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
    for i, msg in enumerate(similar_messages, 1):
        response += f"{i}. <b>{msg['user_name']}</b> ({msg['created_at'].strftime('%d.%m %H:%M')})\n"
        response += f"   üìä –°—Ö–æ–∂–µ—Å—Ç—å: {msg['similarity']:.1%}\n"
        response += f"   üí¨ {html.escape(msg['text'][:100])}{'...' if len(msg['text']) > 100 else ''}\n\n"

    await message.answer(response, parse_mode="HTML")


@router.message(Command("ex"))
async def ex_command_handler(message: types.Message):
    parts = message.text.split()
    args = parts[1:]
    if len(args) != 2:
        return await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ex <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞>. –ü—Ä–∏–º–µ—Ä: /ex 100 USD"
        )
    try:
        amount = float(args[0])
        base_currency = args[1]
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.")

    result_text = convert_and_format(amount, base_currency)
    await message.answer(result_text, parse_mode="HTML")


@router.message(Command("taro"))
async def cmd_taro(message: types.Message):
    try:
        cards = draw_cards(manara_cards, count=3, reversed_chance=REVERSED_CHANCE)
    except ValueError as e:
        return await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
    for i, (fname, card_name, is_rev) in enumerate(cards):
        pos_text = positions[i]
        orientation = " (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if is_rev else ""
        caption = f"{pos_text}: {card_name}{orientation}"
        full_path = os.path.join(TARO_FOLDER, fname)

        interpretation = await get_card_interpretation(card_name, pos_text, is_rev)

        try:
            photo = FSInputFile(full_path)
            await message.answer_photo(photo=photo, caption=caption)
        except FileNotFoundError:
            await message.answer(
                f"**–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**: {full_path}\n\n"
                f"{caption}\n\n{interpretation}",
                parse_mode="Markdown"
            )
            continue

        await message.answer(f"<pre>{html.escape(interpretation)}</pre>",
                             parse_mode="HTML")


@router.message(Command("web"))
async def cmd_web(message: types.Message):
    await process_web_command(message)


async def process_message_embedding(message: types.Message, text: str,
                                    message_id: Optional[int] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    emb = await get_embedding(text)
    if not emb:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
        return None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    await save_embedding(
        group_id=message.chat.id,
        user_id=message.from_user.id,
        embedding_vector=emb,
        message_id=message_id
    )

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º sentiment –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(text) > 10:
        sentiment = await analyze_sentiment(text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_metrics(
            group_id=message.chat.id,
            user_id=message.from_user.id,
            metric_date=datetime.utcnow(),
            metrics={
                'sentiment_score': sentiment,
                'message_count': 1  # –ë—É–¥–µ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ë–î
            }
        )

    logger.info(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    return emb


@router.message(F.text)
async def handle_text_message(message: types.Message):
    if message.chat.id not in GROUP_IDS:
        return

    text = message.text.strip()
    if not text:
        return

    user_name = message.from_user.full_name if message.from_user else "unknown"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º
    reply_to_id = None
    if message.reply_to_message:
        reply_to_id = message_cache.get(message.reply_to_message.message_id, {}).get('db_id')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_db_id = await save_message(
        group_id=message.chat.id,
        user_id=message.from_user.id,
        user_name=user_name,
        text=text,
        reply_to_message_id=reply_to_id
    )

    # –ö—ç—à–∏—Ä—É–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    message_cache[message.message_id] = {
        'db_id': message_db_id,
        'timestamp': datetime.utcnow()
    }

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    await cleanup_message_cache()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    await process_message_embedding(message, text, message_db_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    lang = detect_language_of_trigger(text)
    text_lower = text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ–º–∞–Ω–¥—ã
    character_mention = detect_character_mention(text)
    if character_mention and lang:
        # –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ –Ω—ë–º
        story = mama_san.get_character_story(character_mention)
        await message.answer(story)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    if any(t in text_lower for t in VOICE_TRIGGERS_EN + VOICE_TRIGGERS_RU):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        reply = await mama_san.generate_contextual_reply(
            text,
            message.from_user.id,
            user_name,
            lang
        )
        await send_voice_reply(message, reply, lang)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    if any(t in text_lower for t in TEXT_TRIGGERS_EN + TEXT_TRIGGERS_RU):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        reply = await mama_san.generate_contextual_reply(
            text,
            message.from_user.id,
            user_name,
            lang
        )
        await message.answer(reply)
        return


@router.message(F.voice)
async def handle_voice_message(message: types.Message):
    if message.chat.id not in GROUP_IDS:
        return

    bot = message.bot
    file_info = await bot.get_file(message.voice.file_id)
    local_filename = "temp_voice.ogg"
    await bot.download_file(file_info.file_path, local_filename)

    transcribed_text = await transcribe_audio(local_filename)

    if not transcribed_text:
        os.remove(local_filename)
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :(")

    user_name = message.from_user.full_name if message.from_user else "unknown"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_db_id = await save_message(
        group_id=message.chat.id,
        user_id=message.from_user.id,
        user_name=user_name,
        text=transcribed_text,
        message_type="voice"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    await message.answer(f"üé§ {user_name}:\n{transcribed_text}")

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ voice —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as err:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å voice %s: %s", message.message_id, err)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    await process_message_embedding(message, transcribed_text, message_db_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    lang = detect_language_of_trigger(transcribed_text)
    text_lower = transcribed_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    character_mention = detect_character_mention(transcribed_text)
    if character_mention and lang:
        story = mama_san.get_character_story(character_mention)
        await message.answer(story)
        return

    # –ï—Å–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã, –æ—Ç–≤–µ—á–∞–µ–º
    if any(t in text_lower for t in VOICE_TRIGGERS_EN + VOICE_TRIGGERS_RU + TEXT_TRIGGERS_EN + TEXT_TRIGGERS_RU):
        reply = await mama_san.generate_contextual_reply(
            transcribed_text,
            message.from_user.id,
            user_name,
            lang if lang else "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        )
        await send_voice_reply(message, reply, lang if lang else "ru")

    os.remove(local_filename)


async def cleanup_message_cache():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ"""
    current_time = datetime.utcnow()
    cutoff_time = current_time - timedelta(hours=1)

    to_remove = []
    for msg_id, data in message_cache.items():
        if data['timestamp'] < cutoff_time:
            to_remove.append(msg_id)

    for msg_id in to_remove:
        del message_cache[msg_id]


@router.message()
async def debug_handler(message: types.Message):
    print("DEBUG:", message.chat.id, message.text)
