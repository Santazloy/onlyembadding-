import re
import logging
from typing import Optional, Dict, List, Tuple
from datetime import datetime, timedelta
from collections import deque
import asyncio
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openai_utils import generate_text, markdown_links_to_html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OPENAI_MODEL_WEBSEARCH = "gpt-4o-search-preview"
MAX_MESSAGE_LENGTH = 4096  # Telegram limit
MAX_RETRIES = 3
RETRY_DELAY = 1.0
RATE_LIMIT_WINDOW = 60  # —Å–µ–∫—É–Ω–¥
RATE_LIMIT_MAX_REQUESTS = 10  # –º–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–æ

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


class RateLimiter:
    """–ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""

    def __init__(self, max_requests: int = RATE_LIMIT_MAX_REQUESTS,
                 window_seconds: int = RATE_LIMIT_WINDOW):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests: Dict[int, deque] = {}  # user_id -> deque of timestamps

    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"""
        now = datetime.now()

        if user_id not in self.requests:
            self.requests[user_id] = deque()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        cutoff = now - timedelta(seconds=self.window_seconds)
        while self.requests[user_id] and self.requests[user_id][0] < cutoff:
            self.requests[user_id].popleft()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[user_id]) >= self.max_requests:
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[user_id].append(now)
        return True

    def get_wait_time(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if user_id not in self.requests or not self.requests[user_id]:
            return 0

        oldest_request = self.requests[user_id][0]
        wait_until = oldest_request + timedelta(seconds=self.window_seconds)
        wait_seconds = (wait_until - datetime.now()).total_seconds()

        return max(0, int(wait_seconds))


class HTMLSanitizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML"""

    # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ –∏ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ã
    ALLOWED_TAGS = {
        'a': ['href'],
        'b': [],
        'i': [],
        'u': [],
        's': [],
        'code': [],
        'pre': [],
        'strong': [],
        'em': [],
        'blockquote': []
    }

    @staticmethod
    def sanitize(text: str) -> str:
        """
        –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏
        placeholders = {}
        placeholder_count = 0

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏
        tag_pattern = re.compile(r'<(/?)(\w+)([^>]*)>', re.IGNORECASE)

        def replace_tag(match):
            nonlocal placeholder_count
            closing = match.group(1)
            tag_name = match.group(2).lower()
            attributes = match.group(3)

            if tag_name in HTMLSanitizer.ALLOWED_TAGS:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                if attributes and not closing:
                    cleaned_attrs = HTMLSanitizer._clean_attributes(tag_name, attributes)
                    if cleaned_attrs:
                        full_tag = f'<{tag_name}{cleaned_attrs}>'
                    else:
                        full_tag = f'<{tag_name}>'
                else:
                    full_tag = f'<{closing}{tag_name}>'

                placeholder = f'__TAG_{placeholder_count}__'
                placeholders[placeholder] = full_tag
                placeholder_count += 1
                return placeholder
            else:
                # –ù–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π —Ç–µ–≥ - —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
                return f'&lt;{closing}{tag_name}{attributes}&gt;'

        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        text = tag_pattern.sub(replace_tag, text)

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = text.replace('&', '&amp;')
        text = text.replace('<', '&lt;')
        text = text.replace('>', '&gt;')

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏
        for placeholder, tag in placeholders.items():
            text = text.replace(placeholder, tag)

        return text

    @staticmethod
    def _clean_attributes(tag_name: str, attributes: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ç–µ–≥–∞"""
        allowed_attrs = HTMLSanitizer.ALLOWED_TAGS.get(tag_name, [])
        if not allowed_attrs:
            return ''

        cleaned = []
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        attr_pattern = re.compile(r'(\w+)=["\']([^"\']+)["\']')

        for match in attr_pattern.finditer(attributes):
            attr_name = match.group(1).lower()
            attr_value = match.group(2)

            if attr_name in allowed_attrs:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è href
                if attr_name == 'href' and not HTMLSanitizer._is_safe_url(attr_value):
                    continue
                cleaned.append(f'{attr_name}="{attr_value}"')

        return ' ' + ' '.join(cleaned) if cleaned else ''

    @staticmethod
    def _is_safe_url(url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ URL"""
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ http/https –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        url_lower = url.lower().strip()
        return (url_lower.startswith('http://') or
                url_lower.startswith('https://') or
                url_lower.startswith('/') or
                not any(url_lower.startswith(p) for p in ['javascript:', 'data:', 'vbscript:']))


class WebSearchHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""

    def __init__(self, rate_limiter: Optional[RateLimiter] = None):
        self.rate_limiter = rate_limiter or RateLimiter()
        self.sanitizer = HTMLSanitizer()

    async def process_web_command(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /web
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if not self.rate_limiter.is_allowed(message.from_user.id):
            wait_time = self.rate_limiter.get_wait_time(message.from_user.id)
            await message.answer(
                f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥."
            )
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
        query = self._extract_query(message.text)
        if not query:
            await self._send_help(message)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            result = await self._perform_search(query)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_result(message, result, loading_msg)

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            logger.info(f"Web search completed for user {message.from_user.id}: {query[:50]}...")

        except Exception as e:
            logger.error(f"Web search error for user {message.from_user.id}: {e}")
            await loading_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def _extract_query(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∑–∞–ø—Ä–æ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã"""
        parts = text.strip().split(maxsplit=1)
        if len(parts) < 2 or not parts[1].strip():
            return None
        return parts[1].strip()

    async def _send_help(self, message: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        help_text = (
            "üîç <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞:</b>\n\n"
            "<code>/web –∑–∞–ø—Ä–æ—Å</code> - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ /web –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n"
            "‚Ä¢ /web –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ AI\n"
            "‚Ä¢ /web –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞\n\n"
            "<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</i>"
        )
        await message.answer(help_text, parse_mode="HTML")

    async def _perform_search(self, query: str) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        last_error = None

        for attempt in range(MAX_RETRIES):
            try:
                # –£–ª—É—á—à–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                enhanced_query = self._enhance_query(query)

                result = await generate_text(
                    prompt=enhanced_query,
                    model=OPENAI_MODEL_WEBSEARCH
                )

                if result and result.strip():
                    return result
                else:
                    raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

            except Exception as e:
                last_error = e
                if attempt < MAX_RETRIES - 1:
                    await asyncio.sleep(RETRY_DELAY * (attempt + 1))
                    logger.warning(f"Retry {attempt + 1} for query: {query[:50]}...")

        raise last_error or Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫")

    def _enhance_query(self, query: str) -> str:
        """–£–ª—É—á—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        enhancements = []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞
        if any(ord(c) > 127 for c in query):  # –ù–µ-ASCII —Å–∏–º–≤–æ–ª—ã
            if any('\u0400' <= c <= '\u04FF' for c in query):  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
                enhancements.append("–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        time_keywords = ['—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ', '–Ω–æ–≤–æ—Å—Ç–∏', '–∞–∫—Ç—É–∞–ª—å–Ω']
        if any(keyword in query.lower() for keyword in time_keywords):
            enhancements.append(f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d %B %Y –≥–æ–¥–∞')}.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        enhanced = query
        if enhancements:
            enhanced = f"{query}\n\n{' '.join(enhancements)}"

        return enhanced

    async def _send_result(self, message: types.Message, result: str,
                           loading_msg: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
        html_result = markdown_links_to_html(result)

        # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º HTML
        safe_html = self.sanitizer.sanitize(html_result)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(safe_html) <= MAX_MESSAGE_LENGTH:
            try:
                await loading_msg.edit_text(
                    safe_html,
                    parse_mode="HTML",
                    disable_web_page_preview=False
                )
            except Exception as e:
                # Fallback –Ω–∞ plain text
                logger.error(f"Failed to send HTML: {e}")
                await loading_msg.edit_text(
                    self._strip_html(result),
                    disable_web_page_preview=True
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            await loading_msg.delete()
            parts = self._split_message(safe_html)

            for i, part in enumerate(parts):
                try:
                    await message.answer(
                        part,
                        parse_mode="HTML",
                        disable_web_page_preview=(i > 0)  # Preview —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
                    )
                    if i < len(parts) - 1:
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    logger.error(f"Failed to send part {i + 1}: {e}")
                    await message.answer(
                        self._strip_html(part),
                        disable_web_page_preview=True
                    )

    def _split_message(self, text: str, max_length: int = MAX_MESSAGE_LENGTH) -> List[str]:
        """–†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(text) <= max_length:
            return [text]

        parts = []
        current_part = ""

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
        paragraphs = text.split('\n\n')

        for para in paragraphs:
            if len(current_part) + len(para) + 2 <= max_length:
                if current_part:
                    current_part += '\n\n'
                current_part += para
            else:
                if current_part:
                    parts.append(current_part)

                # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                if len(para) > max_length:
                    sentences = re.split(r'(?<=[.!?])\s+', para)
                    current_part = ""

                    for sent in sentences:
                        if len(current_part) + len(sent) + 1 <= max_length:
                            if current_part:
                                current_part += ' '
                            current_part += sent
                        else:
                            if current_part:
                                parts.append(current_part)
                            current_part = sent
                else:
                    current_part = para

        if current_part:
            parts.append(current_part)

        return parts

    def _strip_html(self, text: str) -> str:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ HTML —Ç–µ–≥–∏ –¥–ª—è fallback"""
        return re.sub(r'<[^>]+>', '', text)


# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
web_handler = WebSearchHandler()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def process_web_command(message: types.Message):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
    await web_handler.process_web_command(message)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
async def process_web_help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /webhelp - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = (
        "üìö <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–µ–±-–ø–æ–∏—Å–∫—É</b>\n\n"

        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —Ä–∞–∑–º–µ—Ç–∫–∏\n"
        "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ (rate limiting)\n\n"

        "<b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>\n"
        "1. –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ\n"
        "2. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≥–æ—Ä–æ–¥, –¥–∞—Ç–∞, —Ç–µ–º–∞)\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n\n"

        "<b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
        "‚úÖ /web —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –≤–µ–≥–∞–Ω—Å–∫–∏–º –º–µ–Ω—é –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã\n"
        "‚úÖ /web —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ iPhone 15 –∏ Samsung S24\n"
        "‚úÖ /web –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"

        "<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {RATE_LIMIT_MAX_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"

        "<i>–°–æ–≤–µ—Ç: —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è</i>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="/web ")]
    ])

    await message.answer(help_text, parse_mode="HTML", reply_markup=keyboard)


async def process_web_stats(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /webstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = message.from_user.id

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞</b>\n\n"
        f"üë§ –í–∞—à ID: <code>{user_id}</code>\n"
        f"üîç –ú–æ–¥–µ–ª—å –ø–æ–∏—Å–∫–∞: <code>{OPENAI_MODEL_WEBSEARCH}</code>\n"
        f"‚è± –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {RATE_LIMIT_MAX_REQUESTS} –≤ {RATE_LIMIT_WINDOW} —Å–µ–∫\n"
    )

    await message.answer(stats_text, parse_mode="HTML")
